// <auto-generated />
using System;
using CarService.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarService.Infrastructure.Migrations
{
    [DbContext(typeof(CarAppContext))]
    [Migration("20230410114755_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarCore.Entities.BodyType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BodyType");
                });

            modelBuilder.Entity("CarCore.Entities.Brand", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("CarCore.Entities.Car", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<long>("BodyTypeID")
                        .HasColumnType("bigint");

                    b.Property<long>("BrandID")
                        .HasColumnType("bigint");

                    b.Property<long>("DriveTypeID")
                        .HasColumnType("bigint");

                    b.Property<long>("EngineTypeID")
                        .HasColumnType("bigint");

                    b.Property<double>("EngineVolume")
                        .HasColumnType("float");

                    b.Property<DateTime>("ManufacturingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Miliage")
                        .HasColumnType("int");

                    b.Property<long>("ModelID")
                        .HasColumnType("bigint");

                    b.Property<long>("ModelOfCarID")
                        .HasColumnType("bigint");

                    b.Property<long>("TransmissionTypeID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("BodyTypeID");

                    b.HasIndex("BrandID");

                    b.HasIndex("DriveTypeID");

                    b.HasIndex("EngineTypeID");

                    b.HasIndex("ModelOfCarID");

                    b.HasIndex("TransmissionTypeID");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarCore.Entities.DriveType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("DriveType");
                });

            modelBuilder.Entity("CarCore.Entities.EngineType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("EngineType");
                });

            modelBuilder.Entity("CarCore.Entities.ModelOfCar", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ModelOfCar");
                });

            modelBuilder.Entity("CarCore.Entities.TransmissionType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("TransmissionType");
                });

            modelBuilder.Entity("CarCore.Entities.Car", b =>
                {
                    b.HasOne("CarCore.Entities.BodyType", "BodyType")
                        .WithMany("Cars")
                        .HasForeignKey("BodyTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarCore.Entities.Brand", "Brand")
                        .WithMany("Cars")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarCore.Entities.DriveType", "DriveType")
                        .WithMany("Cars")
                        .HasForeignKey("DriveTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarCore.Entities.EngineType", "EngineType")
                        .WithMany("Cars")
                        .HasForeignKey("EngineTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarCore.Entities.ModelOfCar", "ModelOfCar")
                        .WithMany("Cars")
                        .HasForeignKey("ModelOfCarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarCore.Entities.TransmissionType", "TransmissionType")
                        .WithMany("Cars")
                        .HasForeignKey("TransmissionTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyType");

                    b.Navigation("Brand");

                    b.Navigation("DriveType");

                    b.Navigation("EngineType");

                    b.Navigation("ModelOfCar");

                    b.Navigation("TransmissionType");
                });

            modelBuilder.Entity("CarCore.Entities.BodyType", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarCore.Entities.Brand", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarCore.Entities.DriveType", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarCore.Entities.EngineType", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarCore.Entities.ModelOfCar", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarCore.Entities.TransmissionType", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
